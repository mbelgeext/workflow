name: Build

on:
  workflow_call:
    inputs:
      APPLICATION_NAME:
        required: true
        type: string
      PROFILE_ENV:
        required: true
        type: string
      GITHUB_ENVIRONMENT:
        required: false
        type: string
        default: "development"
      GITHUB_ACCOUNT:
        required: false
        type: string
        default: "bycnit-vinhtong"
      GITHUB_EMAIL:
        required: false
        type: string
        default: "vinh.tong@bouygues-construction.com"
      RELEASE_INCREMENT:
        type: boolean
        required: false
        default: false
      JDK_VERSION:
        type: string
        required: false
        default: 8  
      WAR_NAME:
        type: string
        required: false
        default: "ROOT"        
      SKIP_TEST:
        required: false
        type: string      
        default: true       
      UPLOAD_ARTIFACT:
        required: false
        type: boolean      
        default: true                  
    outputs:
      RELEASE_VERSION:
        description: "Version number"
        value: ${{ jobs.build.outputs.RELEASE_VERSION }}

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ inputs.GITHUB_ENVIRONMENT }}    
    outputs:
      RELEASE_VERSION: ${{ steps.project-version.outputs.RELEASE_VERSION }}
    name: Build
    steps:

    - name: üõéÔ∏è Checkout
      uses: actions/checkout@v2 
   
    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: ${{ inputs.JDK_VERSION }}    
        distribution: 'adopt'
        cache: maven

    - name: Use Node 12.x
      uses: actions/setup-node@v2
      with:
        node-version: '12.13.0'

    - name: Configure Git user
      run: |
        git config user.email "vinh.tong@bouygues-construction.com"
        git config user.name "bycnit-vinhtong"

    - name: üîñ Manage release version dev
      if: ${{ !inputs.RELEASE_INCREMENT }}
      id: project-version-dev
      run: | 
          RELEASE_VERSION_DEV=$(echo $( mvn help:evaluate -Dexpression=project.version -q -DforceStdout )) 
          echo "::set-output name=RELEASE_VERSION::$RELEASE_VERSION_DEV"
          echo "Version : $RELEASE_VERSION_DEV"
    - name: üîñ Manage release version release
      if: ${{ inputs.RELEASE_INCREMENT }}
      id: project-version-release
      run: | 
          RELEASE_VERSION=$(echo $( mvn help:evaluate -Dexpression=project.version -q -DforceStdout )) 
          RELEASE_VERSION_PRO=$(echo $RELEASE_VERSION | sed 's/\-SNAPSHOT//')
          echo "RELEASE_VERSION=$RELEASE_VERSION_PRO" >> $GITHUB_ENV
          echo "::set-output name=RELEASE_VERSION::$RELEASE_VERSION_PRO"
          echo "Version : $RELEASE_VERSION" 

    - name: üíæ Cache the Maven packages to speed up build
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2   
      
    - name: üèóÔ∏è Build 
      if: ${{ !inputs.RELEASE_INCREMENT }}    
      run: mvn  -B -Dmaven.test.skip=${{ inputs.SKIP_TEST }} clean install -P${{ inputs.PROFILE_ENV }} -Dwar.name=${{ inputs.WAR_NAME }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



    - name: Build release
      if: ${{ inputs.RELEASE_INCREMENT }}    
      run: mvn -B -DskipTests -Darguments=-DskipTests  -Darguments="-Dmaven.javadoc.skip=true -Dmaven.test.skip=true" release:prepare release:perform -P${{ inputs.PROFILE_ENV }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: ‚¨áÔ∏è Upload artifact
      if: ${{ inputs.UPLOAD_ARTIFACT }}    
      uses: actions/upload-artifact@v2
      with:
        name: ${{ inputs.APPLICATION_NAME }}
        path: '${{ github.workspace }}/target/ROOT.jar' 