name: Reusable workflow

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    inputs:
      Profile:
        required: true
        type: string 
      ServiceName:
        required: true
        type: string 
      ImageName:
        required: true
        type: string         
      RTU_AZUREAPPSERVICE_URL:
        required: true
        type: string              
    secrets:
      RTU_SONAR_BYCNIT_TOKEN:
        required: true
      RTU_AZUREAPPSERVICE_CONTAINERUSERNAME: 
        required: true
      RTU_AZUREAPPSERVICE_CONTAINERPASSWORD: 
        required: true
        
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      release-version: ${{steps.project-version.outputs.RELEASE_VERSION}}
    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]  
    steps:
    - uses: actions/checkout@v2     
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        config-file: ./.github/codeql/codeql-config.yml       
        languages: ${{ matrix.language }}      
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven
    - name: Set release version
      id: project-version
      run: | 
        RELEASE_VERSION_DEV=$(echo $( mvn help:evaluate -Dexpression=project.version -q -DforceStdout )) 
        echo "::set-output name=RELEASE_VERSION::$RELEASE_VERSION_DEV"
    - name: Show release version
      run: | 
         echo "${{steps.project-version.outputs.RELEASE_VERSION}}" 
    - name: Cache the Maven packages to speed up build
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2   
        
    - name: Test
      run: mvn clean verify sonar:sonar -Dsonar.login=${{ secrets.RTU_SONAR_BYCNIT_TOKEN }} -P${{ inputs.Profile }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: SonarQube Quality Gate Check
      uses: SonarSource/sonarqube-quality-gate-action@v1.0.0
      timeout-minutes: 5
      with:
        scanMetadataReportFile: ${{ github.workspace }}/target/sonar/report-task.txt  # optional, default is .scannerwork/report-task.txt
      env: 
        SONAR_TOKEN: ${{ secrets.RTU_SONAR_BYCNIT_TOKEN }}   

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
      
    - name: Build and deploy package
      run: mvn  -B -DskipTests -Darguments=-DskipTests deploy -P${{ inputs.Profile }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}          
    - name: Check File exists
      run: |
        ls ${{ github.workspace }}/target 
        ls ${{ github.workspace }}/target/sonar 
 
    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v2
      with:
        name: ${{ inputs.ServiceName }}
        path: '${{ github.workspace }}/target/${{ inputs.ServiceName }}.war'  
    - uses: deblockt/cucumber-report-annotations-action@v1.7
      with:
        access-token: ${{ secrets.GITHUB_TOKEN }}
        path: "${{ github.workspace }}/target/cucumber/cucumber-report.json"  
  publish-image-to-acr-dev:
    runs-on: 'ubuntu-latest'
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v2
    - name: Get release version
      run: | 
         echo "${{ needs.build-and-test.outputs.release-version }}" 
    - name: Download artifact from build job
      uses: actions/download-artifact@v2
      with:
        name: ${{ inputs.ServiceName }}
        path: ${{ github.workspace }}/target
    - name: Check File exists
      run: |
        ls ${{ github.workspace }}/target          

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Log in to registry
      uses: docker/login-action@v1
      with:
        registry: https://${{ inputs.RTU_AZUREAPPSERVICE_URL }}
        username: ${{ secrets.RTU_AZUREAPPSERVICE_CONTAINERUSERNAME }}
        password: ${{ secrets.RTU_AZUREAPPSERVICE_CONTAINERPASSWORD }}  
    - name: Build Docker image
      uses: docker/build-push-action@v2
      with:
        repository: ${{ inputs.ImageName }}
        tags: ${{ inputs.ImageName }}:${{ needs.build-and-test.outputs.release-version }}
        file: ./Dockerfile
        context: ./    
        push: false       
        load: true

    #- uses: Azure/container-scan@v0 
      #name: Scan image for vulnerabilities
      #id: container-scan
      #continue-on-error: true
      #with:
        #image-name: ${{ env.ImageName }}:${{ needs.build-and-test.outputs.release-version }}
        #severity-threshold: HIGH, CRITICAL
        #run-quality-checks: true      
    # - name: Scan image
      # uses: anchore/scan-action@v3
      # id: scan-image
      # with:
        # image: ${{ env.ImageName }}:${{ needs.build-and-test.outputs.release-version }}
        # fail-build: false
        # debug: true
        # severity-cutoff: medium
        # acs-report-enable: true
    #- name: Inspect Image scan report
      #run: cat ${{ github.workspace }}/results.sarif  

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ inputs.ImageName }}:${{ needs.build-and-test.outputs.release-version }}
        format: 'template'
        template: '@/contrib/sarif.tpl'
        output: 'results.sarif'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v1
      with:
        # Path to SARIF file relative to the root of the repository
        sarif_file: ${{ github.workspace }}/results.sarif  
          
    - name: Push container image to registry
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ${{ inputs.ImageName }}:${{ needs.build-and-test.outputs.release-version }}, ${{ inputs.ImageName }}:latest
        file: ./Dockerfile
        context: ./    
        no-cache: true